datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["services", "resources"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "multiSchema"]
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/model"
  outputToNestJsResourceStructure = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Model"
  entityPrefix                    = ""
  entitySuffix                    = "Entity"
  fileNamingStyle                 = "kebab"
}

enum Role {
  USER
  ADMINISTRATOR

  @@map("role")
  @@schema("services")
}

enum RegistrationState {
  REGISTERING
  REGISTERED
  UNREGISTERING
  UNREGISTERED

  @@map("registration_state")
  @@schema("services")
}

enum ActiveStatus {
  OFFLINE
  ONLINE
  IDLE
  DO_NOT_DISTURB
  INVISIBLE
  GAME

  @@map("active_status")
  @@schema("services")
}

model Account {
  id                    Int               @id @default(autoincrement())
  uuid                  String            @unique @default(uuid()) @db.Uuid
  // Authentication
  authIssuer            Int
  authSubject           String            @db.VarChar(256)
  otpSecret             String?           @db.VarChar(512)
  // Register
  createdTimestamp      DateTime          @default(now())
  changedTimestamp      DateTime          @default(now())
  registrationState     RegistrationState @default(REGISTERING)
  // Profile
  nickName              String?
  nickTag               Int               @default(0)
  avatarKey             String?           @db.VarChar(512)
  role                  Role              @default(USER)
  record                Record?
  // Status
  activeStatus          ActiveStatus      @default(OFFLINE)
  activeTimestamp       DateTime          @default(now())
  statusMessage         String            @default("")
  sessions              Session[]
  devices               Device[]          @relation("AccountsDevices")
  // Social
  friends               Friend[]          @relation("FriendList")
  friendReferences      Friend[]          @relation("FriendReference")
  enemies               Enemy[]           @relation("EnemyList")
  enemyReferences       Enemy[]           @relation("EnemyReference")
  bans                  Ban[]             @relation("BanList")
  managedBanTargets     Ban[]             @relation("ManagedBanTarget")
  // Chat
  chatRooms             ChatMember[]
  chatMessages          ChatMessage[]
  chatBans              ChatBan[]         @relation("ChatBanList")
  managedChatBanTargets ChatBan[]         @relation("ManagedChatBanTarget")
  // Game
  gameQueue             GameQueue?
  gameMember            GameMember?
  gameHistory           GameHistory[]
  currentGameDevice     Device?           @relation("CurrentGameDevice", fields: [currentGameDeviceId], references: [id])
  currentGameDeviceId   Int?              @unique

  @@unique([authIssuer, authSubject])
  @@index([nickName, nickTag])
  @@map("accounts")
  @@schema("services")
}

model Authorization {
  id               String   @id @default(nanoid())
  endpointKey      String
  redirectURI      String
  createdTimestamp DateTime @default(now())

  @@map("authorizations")
  @@schema("services")
}

model Session {
  id               Int      @id @default(autoincrement())
  account          Account  @relation(fields: [accountId], references: [id])
  accountId        Int
  token            String   @unique @default(nanoid(128))
  createdTimestamp DateTime @default(now())
  successor        Session? @relation("SessionHistory")
  predecessor      Session? @relation("SessionHistory", fields: [predecessorId], references: [id])
  predecessorId    Int?     @unique
  isValid          Boolean  @default(true)

  @@map("sessions")
  @@schema("services")
}

model Device {
  id               Int       @id @default(autoincrement())
  fingerprint      String    @unique @default(nanoid())
  createdTimestamp DateTime  @default(now())
  updatedTimestamp DateTime  @updatedAt
  ipAddress        String
  userAgent        String
  accounts         Account[] @relation("AccountsDevices")
  // Game
  gameAccount      Account?  @relation("CurrentGameDevice")

  @@index([updatedTimestamp])
  @@map("devices")
  @@schema("services")
}

model Record {
  account        Account       @relation(fields: [accountId], references: [id])
  accountId      Int           @id
  achievements   Achievement[]
  skillRating    Int           @default(0)
  winCount       Int           @default(0)
  loseCount      Int           @default(0)
  tieCount       Int           @default(0)
  gameStatistics Json          @default("{}")

  @@index([skillRating(sort: Asc)])
  @@index([gameStatistics(ops: JsonbOps)], type: Gin)
  @@map("records")
  @@schema("services")
}

model Achievement {
  record             Record   @relation(fields: [accountId], references: [accountId])
  accountId          Int
  achievementId      Int
  completedTimestamp DateTime @default(now())

  @@id([accountId, achievementId])
  @@map("achievements")
  @@schema("services")
}

model Friend {
  account         Account @relation("FriendList", fields: [accountId], references: [id])
  accountId       Int
  friendAccount   Account @relation("FriendReference", fields: [friendAccountId], references: [id])
  friendAccountId Int
  groupName       String
  activeFlags     Int

  @@id(fields: [accountId, friendAccountId])
  @@map("friends")
  @@schema("services")
}

model Enemy {
  account        Account @relation("EnemyList", fields: [accountId], references: [id])
  accountId      Int
  enemyAccount   Account @relation("EnemyReference", fields: [enemyAccountId], references: [id])
  enemyAccountId Int
  memo           String

  @@id(fields: [accountId, enemyAccountId])
  @@map("enemies")
  @@schema("services")
}

model Ban {
  id               Int       @id @default(autoincrement())
  account          Account   @relation("BanList", fields: [accountId], references: [id])
  accountId        Int
  managerAccount   Account   @relation("ManagedBanTarget", fields: [managerAccountId], references: [id])
  managerAccountId Int
  reason           String
  memo             String
  expireTimestamp  DateTime?
  bannedTimestamp  DateTime  @default(now())

  @@map("bans")
  @@schema("services")
}

model Chat {
  id        Int           @id @default(autoincrement())
  uuid      String        @unique @default(uuid()) @db.Uuid
  title     String
  modeFlags Int
  password  String
  limit     Int
  members   ChatMember[]
  messages  ChatMessage[]

  @@map("chats")
  @@schema("services")
}

model ChatMember {
  chat          Chat         @relation(fields: [chatId], references: [id])
  chatId        Int
  account       Account      @relation(fields: [accountId], references: [id])
  accountId     Int
  modeFlags     Int
  lastMessage   ChatMessage? @relation(fields: [lastMessageId], references: [uuid])
  lastMessageId String?      @db.Uuid

  @@id([chatId, accountId])
  @@map("chat_members")
  @@schema("services")
}

model ChatMessage {
  uuid           String       @id @unique @default(uuid()) @db.Uuid
  chat           Chat         @relation(fields: [chatId], references: [id])
  chatId         Int
  account        Account      @relation(fields: [accountId], references: [id])
  accountId      Int
  content        String
  modeFlags      Int
  timestamp      DateTime     @default(now())
  reachedMembers ChatMember[]

  @@index([timestamp(ops: TimestampMinMaxOps)], type: Brin)
  @@map("chat_messages")
  @@schema("services")
}

model ChatBan {
  id               Int       @id @default(autoincrement())
  account          Account   @relation("ChatBanList", fields: [accountId], references: [id])
  accountId        Int
  managerAccount   Account   @relation("ManagedChatBanTarget", fields: [managerAccountId], references: [id])
  managerAccountId Int
  reason           String
  memo             String
  expireTimestamp  DateTime?
  bannedTimestamp  DateTime  @default(now())

  @@map("chat_bans")
  @@schema("services")
}

model Game {
  id          BigInt       @id @default(autoincrement())
  uuid        String       @unique @default(uuid()) @db.Uuid
  code        String       @unique @default(nanoid(2))
  title       String
  modeFlags   Int
  password    String
  battlefield Int
  timestamp   DateTime     @default(now())
  statistic   Json         @default("{}")
  members     GameMember[]

  @@map("games")
  @@schema("services")
}

model GameMember {
  game      Game    @relation(fields: [gameId], references: [id])
  gameId    BigInt
  account   Account @relation(fields: [accountId], references: [id])
  accountId Int     @unique
  modeFlags Int
  statistic Json    @default("{}")

  @@id([gameId, accountId])
  @@map("game_members")
  @@schema("services")
}

model GameQueue {
  account     Account  @relation(fields: [accountId], references: [id])
  accountId   Int      @unique
  skillRating Int
  timestamp   DateTime @default(now())

  @@index([skillRating])
  @@index([timestamp])
  @@map("game_queue")
  @@schema("services")
}

model GameHistory {
  id               BigInt    @id
  uuid             String    @unique @db.Uuid
  modeFlags        Int
  battlefield      Int
  timestamp        DateTime
  statistic        Json      @default("{}")
  members          Account[]
  memberStatistics Json      @default("[]")

  @@index([timestamp(ops: TimestampMinMaxOps)], type: Brin)
  @@index([statistic(ops: JsonbOps)], type: Gin)
  @@index([memberStatistics(ops: JsonbOps)], type: Gin)
  @@map("game_history")
  @@schema("services")
}
